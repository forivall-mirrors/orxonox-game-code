/*
 *   ORXONOX - the hottest 3D action shooter ever to exist
 *                    > www.orxonox.net <
 *
 *
 *   License notice:
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License
 *   as published by the Free Software Foundation; either version 2
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 *   Author:
 *      Reto Grieder
 *   Co-authors:
 *      ...
 *
 */

/**
@file
@brief
    Various constants and options that only affect very little code.
@note
    This is merely to avoid recompiling everything when only a path changes.
@remarks
    @GENERATED_FILE_COMMENT@
*/

#ifndef _SpecialConfig_H__
#define _SpecialConfig_H__

#include "OrxonoxConfig.h"
#include <boost/preprocessor/stringize.hpp>

/**
@def CEGUILUA_USE_INTERNAL_LIBRARY
    Set whether we must suffix "ceguilua/" for the CEGUILua.h include
*/
#cmakedefine CEGUILUA_USE_INTERNAL_LIBRARY

/**
@def DEPENDENCY_PACKAGE_ENABLE
    Defined if a precompiled depdency package was used. We then copy all libraries
    too when installing.
*/
#cmakedefine DEPENDENCY_PACKAGE_ENABLE

/**
@def INSTALL_COPYABLE
    Orxonox either gets installed to the system or just into a folder.
    The latter uses relative paths.
*/
#cmakedefine INSTALL_COPYABLE

/**
@def CMAKE_CONFIGURATION_TYPES
    Using MSVC or XCode IDE
*/
#cmakedefine CMAKE_CONFIGURATION_TYPES

// Handle default ConfigValues
namespace orxonox
{
    // INSTALLATION PATHS
    const char ORXONOX_RUNTIME_INSTALL_PATH[] = "@ORXONOX_RUNTIME_INSTALL_PATH@";
    const char ORXONOX_MEDIA_INSTALL_PATH[]   = "@ORXONOX_MEDIA_INSTALL_PATH@";
    /* Config and Log path might be relative because they could be user and therefore runtime dependent */
    const char ORXONOX_CONFIG_INSTALL_PATH[]  = "@ORXONOX_CONFIG_INSTALL_PATH@";
    const char ORXONOX_LOG_INSTALL_PATH[]     = "@ORXONOX_LOG_INSTALL_PATH@";

    // DEVELOPMENT RUN PATHS
    const char ORXONOX_MEDIA_DEV_PATH[]       = "@CMAKE_MEDIA_OUTPUT_DIRECTORY@";
#ifdef CMAKE_CONFIGURATION_TYPES
    const char ORXONOX_CONFIG_DEV_PATH[]      = "@CMAKE_CONFIG_OUTPUT_DIRECTORY@/" BOOST_PP_STRINGIZE(CMAKE_BUILD_TYPE);
    const char ORXONOX_LOG_DEV_PATH[]         = "@CMAKE_LOG_OUTPUT_DIRECTORY@/"    BOOST_PP_STRINGIZE(CMAKE_BUILD_TYPE);
#else
    const char ORXONOX_CONFIG_DEV_PATH[]      = "@CMAKE_CONFIG_OUTPUT_DIRECTORY@";
    const char ORXONOX_LOG_DEV_PATH[]         = "@CMAKE_LOG_OUTPUT_DIRECTORY@";
#endif
    
    /* OGRE Plugins */
#ifdef NDEBUG
    const char ORXONOX_OGRE_PLUGINS[] = "@OGRE_PLUGINS_RELEASE@";
#  ifdef DEPENDENCY_PACKAGE_ENABLE
    const char ORXONOX_OGRE_PLUGINS_FOLDER[] = ".";
#  else
    const char ORXONOX_OGRE_PLUGINS_FOLDER[] = "@OGRE_PLUGINS_FOLDER_RELEASE@";
#  endif
#else
    const char ORXONOX_OGRE_PLUGINS[] = "@OGRE_PLUGINS_DEBUG@";
#  ifdef DEPENDENCY_PACKAGE_ENABLE
    const char ORXONOX_OGRE_PLUGINS_FOLDER[] = ".";
#  else
    const char ORXONOX_OGRE_PLUGINS_FOLDER[] = "@OGRE_PLUGINS_FOLDER_DEBUG@";
#  endif
#endif
}

/**
@def ORXONOX_USE_WINMAIN
    Use main() or WinMain()?
*/
#cmakedefine ORXONOX_USE_WINMAIN

#endif /* _SpecialConfig_H__ */
